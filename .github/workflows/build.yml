name: C++ CI

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Set up CMake (stable action with v1 tag)
      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.29.x'

      # Cache vcpkg binary archives (per OS)
      - name: Cache vcpkg archives (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/vcpkg/archives
          key: linux-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            linux-vcpkg-

      - name: Cache vcpkg archives (macOS)
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/vcpkg/archives
          key: macos-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            macos-vcpkg-

      - name: Cache vcpkg archives (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\vcpkg\archives
          key: windows-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            windows-vcpkg-

      # Install / bootstrap vcpkg if not present
      - name: Ensure vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $vcpkg = "$env:USERPROFILE\vcpkg\vcpkg.exe"
          if (!(Test-Path $vcpkg)) {
            git clone https://github.com/microsoft/vcpkg $env:USERPROFILE\vcpkg
            & $env:USERPROFILE\vcpkg\bootstrap-vcpkg.bat
          }

      - name: Ensure vcpkg (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ ! -x "$HOME/vcpkg/vcpkg" ]; then
            git clone https://github.com/microsoft/vcpkg "$HOME/vcpkg"
            "$HOME/vcpkg/bootstrap-vcpkg.sh" -disableMetrics
          fi

      # Configure + Build + Test
      # Windows: use VS generator; Linux/macOS: single-config with Release
      - name: Configure (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake -S . -B build `
            -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="$env:USERPROFILE/vcpkg/scripts/buildsystems/vcpkg.cmake"
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cmake --build build --config Release --parallel
      - name: Test (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ctest --test-dir build --config Release --output-on-failure

      - name: Configure (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="$HOME/vcpkg/scripts/buildsystems/vcpkg.cmake"
      - name: Build (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: cmake --build build --parallel
      - name: Test (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: ctest --test-dir build --output-on-failure
